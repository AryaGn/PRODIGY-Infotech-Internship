# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/139THRDFG3EHvBXVUvNlcdZ0ds0ACxGeW
"""

!pip install mediapipe

import cv2
import mediapipe as mp
import numpy as np

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils


cap = cv2.VideoCapture(0)


def classify_gesture(landmarks):
    thumb_tip = landmarks[4]
    index_tip = landmarks[8]
    middle_tip = landmarks[12]
    ring_tip = landmarks[16]
    pinky_tip = landmarks[20]


    wrist = landmarks[0]
    d_thumb = np.linalg.norm(np.array(thumb_tip) - np.array(wrist))
    d_index = np.linalg.norm(np.array(index_tip) - np.array(wrist))
    d_middle = np.linalg.norm(np.array(middle_tip) - np.array(wrist))

    # Simple rules for demonstration
    if d_thumb < 0.1 and d_index < 0.1 and d_middle < 0.1:
        return "Fist"
    elif d_index > 0.2 and d_middle > 0.2 and d_thumb < 0.1:
        return "Peace"
    elif d_index > 0.2 and d_middle > 0.2 and d_thumb > 0.2:
        return "Open Hand"
    else:
        return "Unknown"

with mp_hands.Hands(
        min_detection_confidence=0.7,
        min_tracking_confidence=0.7,
        max_num_hands=1) as hands:

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # Flip and convert color
        frame = cv2.flip(frame, 1)
        rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # Process with MediaPipe
        results = hands.process(rgb)
        gesture = "No Hand"

        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                # Draw landmarks
                mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)

                # Extract landmark coordinates
                h, w, _ = frame.shape
                landmarks = [(lm.x, lm.y) for lm in hand_landmarks.landmark]
                landmarks_px = [(int(x * w), int(y * h)) for x, y in landmarks]

                # Classify gesture
                gesture = classify_gesture(landmarks)

        # Display gesture
        cv2.putText(frame, f'Gesture: {gesture}', (10, 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

        cv2.imshow('Hand Gesture Recognition', frame)

        if cv2.waitKey(1) & 0xFF == 27:  # Press ESC to quit
            break

cap.release()
cv2.destroyAllWindows()